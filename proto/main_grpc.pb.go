// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: main.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderboardClient is the client API for Leaderboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderboardClient interface {
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error)
	Find(ctx context.Context, opts ...grpc.CallOption) (Leaderboard_FindClient, error)
	GetLeaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error)
}

type leaderboardClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardClient(cc grpc.ClientConnInterface) LeaderboardClient {
	return &leaderboardClient{cc}
}

func (c *leaderboardClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/leaderboard.Leaderboard/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardClient) LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error) {
	out := new(LogInResponse)
	err := c.cc.Invoke(ctx, "/leaderboard.Leaderboard/LogIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardClient) Find(ctx context.Context, opts ...grpc.CallOption) (Leaderboard_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &Leaderboard_ServiceDesc.Streams[0], "/leaderboard.Leaderboard/Find", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderboardFindClient{stream}
	return x, nil
}

type Leaderboard_FindClient interface {
	Send(*RankRequest) error
	Recv() (*RankResponse, error)
	grpc.ClientStream
}

type leaderboardFindClient struct {
	grpc.ClientStream
}

func (x *leaderboardFindClient) Send(m *RankRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leaderboardFindClient) Recv() (*RankResponse, error) {
	m := new(RankResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *leaderboardClient) GetLeaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error) {
	out := new(LeaderboardResponse)
	err := c.cc.Invoke(ctx, "/leaderboard.Leaderboard/GetLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardServer is the server API for Leaderboard service.
// All implementations must embed UnimplementedLeaderboardServer
// for forward compatibility
type LeaderboardServer interface {
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	LogIn(context.Context, *LogInRequest) (*LogInResponse, error)
	Find(Leaderboard_FindServer) error
	GetLeaderboard(context.Context, *LeaderboardRequest) (*LeaderboardResponse, error)
	mustEmbedUnimplementedLeaderboardServer()
}

// UnimplementedLeaderboardServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderboardServer struct {
}

func (UnimplementedLeaderboardServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedLeaderboardServer) LogIn(context.Context, *LogInRequest) (*LogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedLeaderboardServer) Find(Leaderboard_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedLeaderboardServer) GetLeaderboard(context.Context, *LeaderboardRequest) (*LeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedLeaderboardServer) mustEmbedUnimplementedLeaderboardServer() {}

// UnsafeLeaderboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardServer will
// result in compilation errors.
type UnsafeLeaderboardServer interface {
	mustEmbedUnimplementedLeaderboardServer()
}

func RegisterLeaderboardServer(s grpc.ServiceRegistrar, srv LeaderboardServer) {
	s.RegisterService(&Leaderboard_ServiceDesc, srv)
}

func _Leaderboard_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboard.Leaderboard/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leaderboard_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboard.Leaderboard/LogIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServer).LogIn(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leaderboard_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeaderboardServer).Find(&leaderboardFindServer{stream})
}

type Leaderboard_FindServer interface {
	Send(*RankResponse) error
	Recv() (*RankRequest, error)
	grpc.ServerStream
}

type leaderboardFindServer struct {
	grpc.ServerStream
}

func (x *leaderboardFindServer) Send(m *RankResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leaderboardFindServer) Recv() (*RankRequest, error) {
	m := new(RankRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Leaderboard_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboard.Leaderboard/GetLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServer).GetLeaderboard(ctx, req.(*LeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Leaderboard_ServiceDesc is the grpc.ServiceDesc for Leaderboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leaderboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaderboard.Leaderboard",
	HandlerType: (*LeaderboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _Leaderboard_Registration_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _Leaderboard_LogIn_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _Leaderboard_GetLeaderboard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Find",
			Handler:       _Leaderboard_Find_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}
